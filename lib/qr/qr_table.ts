
/**
 * QR Code Table
 * 
 * Column values: 
 * 0. Number of data codewords
 * 1. Numeric capacity
 * 2. Alphanumeric capacity
 * 3. Byte capacity
 * 4. Kanji capacity
 * 5. Error correction codewords
 * 6. Group 1 blocks
 * 7. Group 1 data codewords
 * 8. Group 2 blocks
 * 9. Group 2 data codewords
 * 
 * Organised by error correction level and version number
 * e.g. to access version 8, level H, use qr_table["H"][7]
 */

export const TOTAL_CODEWORDS_COL = 0;
export const NUMERIC_COL = 1;
export const ALPHANUMERIC_COL = 2;
export const BYTE_COL = 3;
export const KANJI_COL = 4;
export const ERROR_CORRECTION_COL = 5;
export const GROUP_1_BLOCKS = 6;
export const GROUP_1_DATA = 7;
export const GROUP_2_BLOCKS = 8;
export const GROUP_2_DATA = 9;

export const qr_table = {
    "L": [
        [19, 41, 25, 17, 10, 7, 1, 19, 0, 0], // version 1
        [34, 77, 47, 32, 20, 10, 1, 34, 0, 0], // version 2
        [55, 127, 77, 53, 32, 15, 1, 55, 0, 0], // version 3
        [80, 187, 114, 78, 48, 20, 1, 80, 0, 0], // version 4
        [108, 255, 154, 106, 65, 26, 1, 108, 0, 0], // version 5
        [136, 322, 195, 134, 82, 18, 2, 68, 0, 0], // version 6
        [156, 370, 224, 154, 95, 20, 2, 78, 0, 0], // version 7
        [194, 461, 279, 192, 118, 24, 2, 97, 0, 0], // version 8
        [232, 552, 335, 230, 141, 30, 2, 116, 0, 0], // version 9
        [274, 652, 395, 271, 167, 18, 2, 68, 2, 69], // version 10
        [324, 772, 468, 321, 198, 20, 4, 81, 0, 0], // version 11
        [370, 883, 535, 367, 226, 24, 2, 92, 2, 93], // version 12
        [428, 1022, 619, 425, 262, 26, 4, 107, 0, 0], // version 13
        [461, 1101, 667, 458, 282, 30, 3, 115, 1, 116], // version 14
        [523, 1250, 758, 520, 320, 22, 5, 87, 1, 88], // version 15
        [589, 1408, 854, 586, 361, 24, 5, 98, 1, 99], // version 16
        [647, 1548, 938, 644, 397, 28, 1, 107, 5, 108], // version 17
        [721, 1725, 1046, 718, 442, 30, 5, 120, 1, 121], // version 18
        [795, 1903, 1153, 792, 488, 28, 3, 113, 4, 114], // version 19
        [861, 2061, 1249, 858, 528, 28, 3, 107, 5, 108], // version 20
        [932, 2232, 1352, 929, 572, 28, 4, 116, 4, 117], // version 21
        [1006, 2409, 1460, 1003, 618, 28, 2, 111, 7, 112], // version 22
        [1094, 2620, 1588, 1091, 672, 30, 4, 121, 5, 122], // version 23
        [1174, 2812, 1704, 1171, 721, 30, 6, 117, 4, 118], // version 24
        [1276, 3057, 1853, 1273, 784, 26, 8, 106, 4, 107], // version 25
        [1370, 3283, 1990, 1367, 842, 28, 10, 114, 2, 115], // version 26
        [1468, 3517, 2132, 1465, 902, 30, 8, 122, 4, 123], // version 27
        [1531, 3669, 2223, 1528, 940, 30, 3, 117, 10, 118], // version 28
        [1631, 3909, 2369, 1628, 1002, 30, 7, 116, 7, 117], // version 29
        [1735, 4158, 2520, 1732, 1066, 30, 5, 115, 10, 116], // version 30
        [1843, 4417, 2677, 1840, 1132, 30, 13, 115, 3, 116], // version 31
        [1955, 4686, 2840, 1952, 1201, 30, 17, 115, 0, 0], // version 32
        [2071, 4965, 3009, 2068, 1273, 30, 17, 115, 1, 116], // version 33
        [2191, 5253, 3183, 2188, 1347, 30, 13, 115, 6, 116], // version 34
        [2306, 5529, 3351, 2303, 1417, 30, 12, 121, 7, 122], // version 35
        [2434, 5836, 3537, 2431, 1496, 30, 6, 121, 14, 122], // version 36
        [2566, 6153, 3729, 2563, 1577, 30, 17, 122, 4, 123], // version 37
        [2702, 6479, 3927, 2699, 1661, 30, 4, 122, 18, 123], // version 38
        [2812, 6743, 4087, 2809, 1729, 30, 20, 117, 4, 118], // version 39
        [2956, 7089, 4296, 2953, 1817, 30, 19, 118, 6, 119], // version 40
    ],
    "M": [
        [16, 34, 20, 14, 8, 10, 1, 16, 0, 0], // version 1
        [28, 63, 38, 26, 16, 16, 1, 28, 0, 0], // version 2
        [44, 101, 61, 42, 26, 26, 1, 44, 0, 0], // version 3
        [64, 149, 90, 62, 38, 18, 2, 32, 0, 0], // version 4
        [86, 202, 122, 84, 52, 24, 2, 43, 0, 0], // version 5
        [108, 255, 154, 106, 65, 16, 4, 27, 0, 0], // version 6
        [124, 293, 178, 122, 75, 18, 4, 31, 0, 0], // version 7
        [154, 365, 221, 152, 93, 22, 2, 38, 2, 39], // version 8
        [182, 432, 262, 180, 111, 22, 3, 36, 2, 37], // version 9
        [216, 513, 311, 213, 131, 26, 4, 43, 1, 44], // version 10
        [254, 604, 366, 251, 155, 30, 1, 50, 4, 51], // version 11
        [290, 691, 419, 287, 177, 22, 6, 36, 2, 37], // version 12
        [334, 796, 483, 331, 204, 22, 8, 37, 1, 38], // version 13
        [365, 871, 528, 362, 223, 24, 4, 40, 5, 41], // version 14
        [415, 991, 600, 412, 254, 24, 5, 41, 5, 42], // version 15
        [453, 1082, 656, 450, 277, 28, 7, 45, 3, 46], // version 16
        [507, 1212, 734, 504, 310, 28, 10, 46, 1, 47], // version 17
        [563, 1346, 816, 560, 345, 26, 9, 43, 4, 44], // version 18
        [627, 1500, 909, 624, 384, 26, 3, 44, 11, 45], // version 19
        [669, 1600, 970, 666, 410, 26, 3, 41, 13, 42], // version 20
        [714, 1708, 1035, 711, 438, 26, 17, 42, 0, 0], // version 21
        [782, 1872, 1134, 779, 480, 28, 17, 46, 0, 0], // version 22
        [860, 2059, 1248, 857, 528, 28, 4, 47, 14, 48], // version 23
        [914, 2188, 1326, 911, 561, 28, 6, 45, 14, 46], // version 24
        [1000, 2395, 1451, 997, 614, 28, 8, 47, 13, 48], // version 25
        [1062, 2544, 1542, 1059, 652, 28, 19, 46, 4, 47], // version 26
        [1128, 2701, 1637, 1125, 692, 28, 22, 45, 3, 46], // version 27
        [1193, 2857, 1732, 1190, 732, 28, 3, 45, 23, 46], // version 28
        [1267, 3035, 1839, 1264, 778, 28, 21, 45, 7, 46], // version 29
        [1373, 3289, 1994, 1370, 843, 28, 19, 47, 10, 48], // version 30
        [1455, 3486, 2113, 1452, 894, 28, 2, 46, 29, 47], // version 31
        [1541, 3693, 2238, 1538, 947, 28, 10, 46, 23, 47], // version 32
        [1631, 3909, 2369, 1628, 1002, 28, 14, 46, 21, 47], // version 33
        [1725, 4134, 2506, 1722, 1060, 28, 14, 46, 23, 47], // version 34
        [1812, 4343, 2632, 1809, 1113, 28, 12, 47, 26, 48], // version 35
        [1914, 4588, 2780, 1911, 1176, 28, 6, 47, 34, 48], // version 36
        [1992, 4775, 2894, 1989, 1224, 28, 29, 46, 14, 47], // version 37
        [2102, 5039, 3054, 2099, 1292, 28, 13, 46, 32, 47], // version 38
        [2216, 5313, 3220, 2213, 1362, 28, 40, 47, 7, 48], // version 39
        [2334, 5596, 3391, 2331, 1435, 28, 18, 47, 31, 48], // version 40
    ],
    "Q": [
        [13, 27, 16, 11, 7, 13, 1, 13, 0, 0], // version 1
        [22, 48, 29, 20, 12, 22, 1, 22, 0, 0], // version 2
        [34, 77, 47, 32, 20, 18, 2, 17, 0, 0], // version 3
        [48, 111, 67, 46, 28, 26, 2, 24, 0, 0], // version 4
        [62, 144, 87, 60, 37, 18, 2, 15, 2, 16], // version 5
        [76, 178, 108, 74, 45, 24, 4, 19, 0, 0], // version 6
        [88, 207, 125, 86, 53, 18, 2, 14, 4, 15], // version 7
        [110, 259, 157, 108, 66, 22, 4, 18, 2, 19], // version 8
        [132, 312, 189, 130, 80, 20, 4, 16, 4, 17], // version 9
        [154, 364, 221, 151, 93, 24, 6, 19, 2, 20], // version 10
        [180, 427, 259, 177, 109, 28, 4, 22, 4, 23], // version 11
        [206, 489, 296, 203, 125, 26, 4, 20, 6, 21], // version 12
        [244, 580, 352, 241, 149, 24, 8, 20, 4, 21], // version 13
        [261, 621, 376, 258, 159, 20, 11, 16, 5, 17], // version 14
        [295, 703, 426, 292, 180, 30, 5, 24, 7, 25], // version 15
        [325, 775, 470, 322, 198, 24, 15, 19, 2, 20], // version 16
        [367, 876, 531, 364, 224, 28, 1, 22, 15, 23], // version 17
        [397, 948, 574, 394, 243, 28, 17, 22, 1, 23], // version 18
        [445, 1063, 644, 442, 272, 26, 17, 21, 4, 22], // version 19
        [485, 1159, 702, 482, 297, 30, 15, 24, 5, 25], // version 20
        [512, 1224, 742, 509, 314, 28, 17, 22, 6, 23], // version 21
        [568, 1358, 823, 565, 348, 30, 7, 24, 16, 25], // version 22
        [614, 1468, 890, 611, 376, 30, 11, 24, 14, 25], // version 23
        [664, 1588, 963, 661, 407, 30, 11, 24, 16, 25], // version 24
        [718, 1718, 1041, 715, 440, 30, 7, 24, 22, 25], // version 25
        [754, 1804, 1094, 751, 462, 28, 28, 22, 6, 23], // version 26
        [808, 1933, 1172, 805, 496, 30, 8, 23, 26, 24], // version 27
        [871, 2085, 1263, 868, 534, 30, 4, 24, 31, 25], // version 28
        [911, 2181, 1322, 908, 559, 30, 1, 23, 37, 24], // version 29
        [985, 2358, 1429, 982, 604, 30, 15, 24, 25, 25], // version 30
        [1033, 2473, 1499, 1030, 634, 30, 42, 24, 1, 25], // version 31
        [1115, 2670, 1618, 1112, 684, 30, 10, 24, 35, 25], // version 32
        [1171, 2805, 1700, 1168, 719, 30, 29, 24, 19, 25], // version 33
        [1231, 2949, 1787, 1228, 756, 30, 44, 24, 7, 25], // version 34
        [1286, 3081, 1867, 1283, 790, 30, 39, 24, 14, 25], // version 35
        [1354, 3244, 1966, 1351, 832, 30, 46, 24, 10, 25], // version 36
        [1426, 3417, 2071, 1423, 876, 30, 49, 24, 10, 25], // version 37
        [1502, 3599, 2181, 1499, 923, 30, 48, 24, 14, 25], // version 38
        [1582, 3791, 2298, 1579, 972, 30, 43, 24, 22, 25], // version 39
        [1666, 3993, 2420, 1663, 1024, 30, 34, 24, 34, 25], // version 40
    ],
    "H": [
        [9, 17, 10, 7, 4, 17, 1, 9, 0, 0], // version 1
        [16, 34, 20, 14, 8, 28, 1, 16, 0, 0], // version 2
        [26, 58, 35, 24, 15, 22, 2, 13, 0, 0], // version 3
        [36, 82, 50, 34, 21, 16, 4, 9, 0, 0], // version 4
        [46, 106, 64, 44, 27, 22, 2, 11, 2, 12], // version 5
        [60, 139, 84, 58, 36, 28, 4, 15, 0, 0], // version 6
        [66, 154, 93, 64, 39, 26, 4, 13, 1, 14], // version 7
        [86, 202, 122, 84, 52, 26, 4, 14, 2, 15], // version 8
        [100, 235, 143, 98, 60, 24, 4, 12, 4, 13], // version 9
        [122, 288, 174, 119, 74, 28, 6, 15, 2, 16], // version 10
        [140, 331, 200, 137, 85, 24, 3, 12, 8, 13], // version 11
        [158, 374, 227, 155, 96, 28, 7, 14, 4, 15], // version 12
        [180, 427, 259, 177, 109, 22, 12, 11, 4, 12], // version 13
        [197, 468, 283, 194, 120, 24, 11, 12, 5, 13], // version 14
        [223, 530, 321, 220, 136, 24, 11, 12, 7, 13], // version 15
        [253, 602, 365, 250, 154, 30, 3, 15, 13, 16], // version 16
        [283, 674, 408, 280, 173, 28, 2, 14, 17, 15], // version 17
        [313, 746, 452, 310, 191, 28, 2, 14, 19, 15], // version 18
        [341, 813, 493, 338, 208, 26, 9, 13, 16, 14], // version 19
        [385, 919, 557, 382, 235, 28, 15, 15, 10, 16], // version 20
        [406, 969, 587, 403, 248, 30, 19, 16, 6, 17], // version 21
        [442, 1056, 640, 439, 270, 24, 34, 13, 0, 0], // version 22
        [464, 1108, 672, 461, 284, 30, 16, 15, 14, 16], // version 23
        [514, 1228, 744, 511, 315, 30, 30, 16, 2, 17], // version 24
        [538, 1286, 779, 535, 330, 30, 22, 15, 13, 16], // version 25
        [596, 1425, 864, 593, 365, 30, 33, 16, 4, 17], // version 26
        [628, 1501, 910, 625, 385, 30, 12, 15, 28, 16], // version 27
        [661, 1581, 958, 658, 405, 30, 11, 15, 31, 16], // version 28
        [701, 1677, 1016, 698, 430, 30, 19, 15, 26, 16], // version 29
        [745, 1782, 1080, 742, 457, 30, 23, 15, 25, 16], // version 30
        [793, 1897, 1150, 790, 486, 30, 23, 15, 28, 16], // version 31
        [845, 2022, 1226, 842, 518, 30, 19, 15, 35, 16], // version 32
        [901, 2157, 1307, 898, 553, 30, 11, 15, 46, 16], // version 33
        [961, 2301, 1394, 958, 590, 30, 59, 16, 1, 17], // version 34
        [986, 2361, 1431, 983, 605, 30, 22, 15, 41, 16], // version 35
        [1054, 2524, 1530, 1051, 647, 30, 2, 15, 64, 16], // version 36
        [1096, 2625, 1591, 1093, 673, 30, 24, 15, 46, 16], // version 37
        [1142, 2735, 1658, 1139, 701, 30, 42, 15, 32, 16], // version 38
        [1222, 2927, 1774, 1219, 750, 30, 10, 15, 67, 16], // version 39
        [1276, 3057, 1852, 1273, 784, 30, 20, 15, 61, 16], // version 40
    ],
};

/*
    * Alphanumeric lookup table
    *
    * Maps alphanumeric characters to their corresponding values for encoding according to ISO/IEC 18004:2015
*/
export const alphanumeric_lookup_table: { [key: string]: number } = {
    '0': 0,
    '1': 1,
    '2': 2,
    '3': 3,
    '4': 4,
    '5': 5,
    '6': 6,
    '7': 7,
    '8': 8,
    '9': 9,
    'A': 10,
    'B': 11,
    'C': 12,
    'D': 13,
    'E': 14,
    'F': 15,
    'G': 16,
    'H': 17,
    'I': 18,
    'J': 19,
    'K': 20,
    'L': 21,
    'M': 22,
    'N': 23,
    'O': 24,
    'P': 25,
    'Q': 26,
    'R': 27,
    'S': 28,
    'T': 29,
    'U': 30,
    'V': 31,
    'W': 32,
    'X': 33,
    'Y': 34,
    'Z': 35,
    ' ': 36,
    '$': 37,
    '%': 38,
    '*': 39,
    '+': 40,
    '-': 41,
    '.': 42,
    '/': 43,
    ':': 44
};

/**
 * Character count bits lookup table
 */
export const cc_bits_table = {
    "NUMERIC": [10, 12, 14],
    "ALPHANUMERIC": [9, 11, 13],
    "BYTE": [8, 16, 16],
    "KANJI": [8, 10, 12],
    "ECI": [8, 16, 16]
}

/**
 * Finder pattern
 */
export const finder_pattern = [
    [1, 1, 1, 1, 1, 1, 1],
    [1, 0, 0, 0, 0, 0, 1],
    [1, 0, 1, 1, 1, 0, 1],
    [1, 0, 1, 1, 1, 0, 1],
    [1, 0, 1, 1, 1, 0, 1],
    [1, 0, 0, 0, 0, 0, 1],
    [1, 1, 1, 1, 1, 1, 1]
];

/**
 * Alignment pattern
 */
export const alignment_pattern = [
    [1, 1, 1, 1, 1],
    [1, 0, 0, 0, 1],
    [1, 0, 1, 0, 1],
    [1, 0, 0, 0, 1],
    [1, 1, 1, 1, 1]
];

/**
 * Alignment pattern location table by version
 * The values represent the coordinates of the center of the alignment pattern
 * To find the full list of coordinates, consider all combinations of values
 * i.e. [a, b] = (a, a), (b, b), (a, b), (b, a)
 * Then remove any coordinates that overlap with finder, version, or format patterns
 * The alignment patterns can overwrite the timing patterns and displaces data modules
 */
export const alignment_pattern_location_table: { [version: number]: number[] } = {
    1: [],
    2: [6, 18],
    3: [6, 22],
    4: [6, 26],
    5: [6, 30],
    6: [6, 34],
    7: [6, 22, 38],
    8: [6, 24, 42],
    9: [6, 26, 46],
    10: [6, 28, 50],
    11: [6, 30, 54],
    12: [6, 32, 58],
    13: [6, 34, 62],
    14: [6, 26, 46, 66],
    15: [6, 26, 48, 70],
    16: [6, 26, 50, 74],
    17: [6, 30, 54, 78],
    18: [6, 30, 56, 82],
    19: [6, 30, 58, 86],
    20: [6, 34, 62, 90],
    21: [6, 28, 50, 72, 94],
    22: [6, 26, 50, 74, 98],
    23: [6, 30, 54, 78, 102],
    24: [6, 28, 54, 80, 106],
    25: [6, 32, 58, 84, 110],
    26: [6, 30, 58, 86, 114],
    27: [6, 34, 62, 90, 118],
    28: [6, 26, 50, 74, 98, 122],
    29: [6, 30, 54, 78, 102, 126],
    30: [6, 26, 52, 78, 104, 130],
    31: [6, 30, 56, 82, 108, 134],
    32: [6, 34, 60, 86, 112, 138],
    33: [6, 30, 58, 86, 114, 142],
    34: [6, 34, 62, 90, 118, 146],
    35: [6, 30, 54, 78, 102, 126, 150],
    36: [6, 24, 50, 76, 102, 128, 154],
    37: [6, 28, 54, 80, 106, 132, 158],
    38: [6, 32, 58, 84, 110, 136, 162],
    39: [6, 26, 54, 82, 110, 138, 166],
    40: [6, 30, 58, 86, 114, 142, 170]
};

/**
 * Version information table
 * 
 * Version information is only present in QR Codes of version 7 or higher
 * The table contains the binary representation of the version information encoded with (18,3) Golay code
 * This is complicated as fuck (for me anyway), so I prefer to store every possible value in a table
 */
export const version_information_binary = {
    7: [0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0],
    8: [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0],
    9: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0],
    10: [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0],
    11: [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0],
    12: [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0],
    13: [0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0],
    14: [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0],
    15: [0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0],
    16: [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0],
    17: [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0],
    18: [0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0],
    19: [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0],
    20: [0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0],
    21: [0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0],
    22: [0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0],
    23: [0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0],
    24: [0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0],
    25: [0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0],
    26: [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
    27: [1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0],
    28: [1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0],
    29: [1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0],
    30: [1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0],
    31: [1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0],
    32: [1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0],
    33: [1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0],
    34: [1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0],
    35: [1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0],
    36: [1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0],
    37: [1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0],
    38: [1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0],
    39: [1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0],
    40: [1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0],
};

/**
 * Data mask patterns
 * 
 */
export const mask_pattern = {
    0: function (i: number, j: number) { return (i + j) % 2 === 0; },
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    1: function (i: number, _: number) { return i % 2 === 0; },
    2: function (_: number, j: number) { return j % 3 === 0; },
    3: function (i: number, j: number) { return (i + j) % 3 === 0; },
    4: function (i: number, j: number) { return (Math.floor(i / 2) + Math.floor(j / 3)) % 2 === 0; },
    5: function (i: number, j: number) { return (i * j) % 2 + (i * j) % 3 === 0; },
    6: function (i: number, j: number) { return ((i * j) % 2 + (i * j) % 3) % 2 === 0; },
    7: function (i: number, j: number) { return ((i + j) % 2 + (i * j) % 3) % 2 === 0; }
};

export const ec_bits_table = {
    "L": 0b01,
    "M": 0b00,
    "Q": 0b11,
    "H": 0b10
}

/**
 * Format information
 * 
 * The format information is used to store error correction level and mask pattern
 * The format information is encoded with (15,5) BCH code
 * The table contains the binary representation of the format information
 */

export const format_information_table = [
    Uint8Array.from([1,0,1,0,1,0,0,0,0,0,1,0,0,1,0]), //0
    Uint8Array.from([1,0,1,0,0,0,1,0,0,1,0,0,1,0,1]), //1 
    Uint8Array.from([1,0,1,1,1,1,0,0,1,1,1,1,1,0,0]), //2
    Uint8Array.from([1,0,1,1,0,1,1,0,1,0,0,1,0,1,1]), //3
    Uint8Array.from([1,0,0,0,1,0,1,1,1,1,1,1,0,0,1]), //4
    Uint8Array.from([1,0,0,0,0,0,0,1,1,0,0,1,1,1,0]), //5
    Uint8Array.from([1,0,0,1,1,1,1,1,0,0,1,0,1,1,1]), //6
    Uint8Array.from([1,0,0,1,0,1,0,1,0,1,0,0,0,0,0]), //7
    Uint8Array.from([1,1,1,0,1,1,1,1,1,0,0,0,1,0,0]), //8
    Uint8Array.from([1,1,1,0,0,1,0,1,1,1,1,0,0,1,1]), //9
    Uint8Array.from([1,1,1,1,1,0,1,1,0,1,0,1,0,1,0]), //10
    Uint8Array.from([1,1,1,1,0,0,0,1,0,0,1,1,1,0,1]), //11
    Uint8Array.from([1,1,0,0,1,1,0,0,0,1,0,1,1,1,1]), //12
    Uint8Array.from([1,1,0,0,0,1,1,0,0,0,1,1,0,0,0]), //13
    Uint8Array.from([1,1,0,1,1,0,0,0,1,0,0,0,0,0,1]), //14
    Uint8Array.from([1,1,0,1,0,0,1,0,1,1,1,0,1,1,0]), //15
    Uint8Array.from([0,0,1,0,1,1,0,1,0,0,0,1,0,0,1]), //16 
    Uint8Array.from([0,0,1,0,0,1,1,1,0,1,1,1,1,1,0]), //17
    Uint8Array.from([0,0,1,1,1,0,0,1,1,1,0,0,1,1,1]), //18
    Uint8Array.from([0,0,1,1,0,0,1,1,1,0,1,0,0,0,0]), //19
    Uint8Array.from([0,0,0,0,1,1,1,0,1,1,0,0,0,1,0]), //20
    Uint8Array.from([0,0,0,0,0,1,0,0,1,0,1,0,1,0,1]), //21
    Uint8Array.from([0,0,0,1,1,0,1,0,0,0,0,1,1,0,0]), //22
    Uint8Array.from([0,0,0,1,0,0,0,0,0,1,1,1,0,1,1]), //23
    Uint8Array.from([0,1,1,0,1,0,1,0,1,0,1,1,1,1,1]), //24
    Uint8Array.from([0,1,1,0,0,0,0,0,1,1,0,1,0,0,0]), //25
    Uint8Array.from([0,1,1,1,1,1,1,0,0,1,1,0,0,0,1]), //26
    Uint8Array.from([0,1,1,1,0,1,0,0,0,0,0,0,1,1,0]), //27
    Uint8Array.from([0,1,0,0,1,0,0,1,0,1,1,0,1,0,0]), //28
    Uint8Array.from([0,1,0,0,0,0,1,1,0,0,0,0,0,1,1]), //29
    Uint8Array.from([0,1,0,1,1,1,0,1,1,0,1,1,0,1,0]), //30
    Uint8Array.from([0,1,0,1,0,1,1,1,1,1,0,1,1,0,1]), //31
]